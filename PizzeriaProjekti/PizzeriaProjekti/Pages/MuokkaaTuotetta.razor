@page "/muokkaus"
@page "/muokkaus/{paramPizza_ID:int}"

@using DataLibrary
@using PizzeriaProjekti.Models
@using Microsoft.Extensions.Configuration
@using System.ComponentModel.DataAnnotations
@inject IDataAccess _data
@inject IConfiguration _config
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h3>@paramPizza_ID</h3>

@if (pizzat == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var pizza in pizzat)
    {
        <EditForm Model="pizzat" OnSubmit="() => SaveData(pizza.Pizza_ID, pizza.P_Nimi, pizza.Taytteet, pizza.P_hinta)">
            <DataAnnotationsValidator />
            <div>
                <label for="Nimi">Nimi</label>
                <InputText @bind-Value=pizza.P_Nimi id="Nimi" />
            </div>
            <div>
                <label for="Taytteet">Täytteet</label>
                <InputText @bind-Value=pizza.Taytteet id="Taytteet" />
            </div>
            <div>
                <label for="Hinta">Hinta</label>
                <InputNumber @bind-Value=pizza.P_hinta id="hinta" /> <br>
            </div>
            <input type="submit" value="Tallenna" />
        </EditForm>
        <button @onclick="NavigateBack">Peruuta</button>
    }
}

@code
{
    private async Task SaveData(int id, string nimi, string taytteet, decimal hinta)
    {
        string sql = "UPDATE Pizza SET P_Nimi = @P_Nimi, Taytteet = @Taytteet, P_Hinta = @P_Hinta WHERE Pizza_ID = @Pizza_ID";
        await _data.SaveData(sql, new { Pizza_ID = @id, P_Nimi = @nimi, Taytteet = @taytteet, P_Hinta = @hinta }, _config.GetConnectionString("default"));
    
        navigationManager.NavigateTo($"hallinta");
    }

    [Parameter]
    public int? paramPizza_ID { get; set; }

    List<PizzaModel> pizzat;

    private void NavigateBack()
    {
        navigationManager.NavigateTo($"hallinta");
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM Pizza WHERE Pizza_ID = @paramPizza_ID";
        // "@paramPizza_ID" tulee sivulle parametrina, joka määritetään sql-kyselyyn "new { }" kohdassa
        pizzat = await _data.LoadData<PizzaModel, dynamic>(sql, new { paramPizza_ID = @paramPizza_ID }, _config.GetConnectionString("default"));
    }
}
